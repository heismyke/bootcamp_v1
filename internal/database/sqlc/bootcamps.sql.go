// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bootcamps.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createBootcamp = `-- name: CreateBootcamp :one
INSERT INTO bootcamps (
  user_id, name, slug, description, website, phone, email, address,careers, job_assistance, job_guarantee, accept_gi
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, user_id, name, slug, description, website, phone, email, address, careers, job_assistance, job_guarantee, accept_gi, created_at
`

type CreateBootcampParams struct {
	UserID        sql.NullInt64   `json:"user_id"`
	Name          string          `json:"name"`
	Slug          sql.NullString  `json:"slug"`
	Description   string          `json:"description"`
	Website       string          `json:"website"`
	Phone         string          `json:"phone"`
	Email         string          `json:"email"`
	Address       string          `json:"address"`
	Careers       json.RawMessage `json:"careers"`
	JobAssistance bool            `json:"job_assistance"`
	JobGuarantee  bool            `json:"job_guarantee"`
	AcceptGi      bool            `json:"accept_gi"`
}

func (q *Queries) CreateBootcamp(ctx context.Context, arg CreateBootcampParams) (Bootcamps, error) {
	row := q.db.QueryRowContext(ctx, createBootcamp,
		arg.UserID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.Website,
		arg.Phone,
		arg.Email,
		arg.Address,
		arg.Careers,
		arg.JobAssistance,
		arg.JobGuarantee,
		arg.AcceptGi,
	)
	var i Bootcamps
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.Website,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.Careers,
		&i.JobAssistance,
		&i.JobGuarantee,
		&i.AcceptGi,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBootcamp = `-- name: DeleteBootcamp :exec
DELETE FROM bootcamps
WHERE id = $1
`

func (q *Queries) DeleteBootcamp(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBootcamp, id)
	return err
}

const getBootcamp = `-- name: GetBootcamp :one
SELECT id, user_id, name, slug, description, website, phone, email, address, careers, job_assistance, job_guarantee, accept_gi, created_at FROM bootcamps
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBootcamp(ctx context.Context, id int64) (Bootcamps, error) {
	row := q.db.QueryRowContext(ctx, getBootcamp, id)
	var i Bootcamps
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.Website,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.Careers,
		&i.JobAssistance,
		&i.JobGuarantee,
		&i.AcceptGi,
		&i.CreatedAt,
	)
	return i, err
}

const listBootcamps = `-- name: ListBootcamps :many
SELECT id, user_id, name, slug, description, website, phone, email, address, careers, job_assistance, job_guarantee, accept_gi, created_at FROM bootcamps
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBootcampsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBootcamps(ctx context.Context, arg ListBootcampsParams) ([]Bootcamps, error) {
	rows, err := q.db.QueryContext(ctx, listBootcamps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bootcamps
	for rows.Next() {
		var i Bootcamps
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.Website,
			&i.Phone,
			&i.Email,
			&i.Address,
			&i.Careers,
			&i.JobAssistance,
			&i.JobGuarantee,
			&i.AcceptGi,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBootcamp = `-- name: UpdateBootcamp :one
UPDATE bootcamps
  SET name = $2,
      slug = $3,
      description = $4,
      website = $5,
      phone = $6,
      email = $7,
      address = $8,
      careers = $9,
      job_assistance = $10,
      job_guarantee = $11,
      accept_gi = $12
WHERE id = $1
RETURNING id, user_id, name, slug, description, website, phone, email, address, careers, job_assistance, job_guarantee, accept_gi, created_at
`

type UpdateBootcampParams struct {
	ID            int64           `json:"id"`
	Name          string          `json:"name"`
	Slug          sql.NullString  `json:"slug"`
	Description   string          `json:"description"`
	Website       string          `json:"website"`
	Phone         string          `json:"phone"`
	Email         string          `json:"email"`
	Address       string          `json:"address"`
	Careers       json.RawMessage `json:"careers"`
	JobAssistance bool            `json:"job_assistance"`
	JobGuarantee  bool            `json:"job_guarantee"`
	AcceptGi      bool            `json:"accept_gi"`
}

func (q *Queries) UpdateBootcamp(ctx context.Context, arg UpdateBootcampParams) (Bootcamps, error) {
	row := q.db.QueryRowContext(ctx, updateBootcamp,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.Website,
		arg.Phone,
		arg.Email,
		arg.Address,
		arg.Careers,
		arg.JobAssistance,
		arg.JobGuarantee,
		arg.AcceptGi,
	)
	var i Bootcamps
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.Website,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.Careers,
		&i.JobAssistance,
		&i.JobGuarantee,
		&i.AcceptGi,
		&i.CreatedAt,
	)
	return i, err
}
